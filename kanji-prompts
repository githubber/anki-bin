#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Anki::Database;

my $db = Anki::Database->new;

my $sth = $db->prepare("
    select kanji.value, reading.value
        from fields as kanji
            join fieldModels as kanjiFieldModel on (kanji.fieldModelId = kanjiFieldModel.id)
            join fields as reading on (kanji.factId = reading.factId)
            join fieldModels as readingFieldModel on (reading.fieldModelId = readingFieldModel.id)
            join facts on (facts.id = kanji.factId)
        where
            kanjiFieldModel.name = '漢字'
            and readingFieldModel.name = '読み'
            and reading.value <> ''
            and facts.tags not like '%atomic-prompt%'
;");
$sth->execute;

my $reading_sth = $db->prepare("
    select readings.value
        from fields as readings
        join fieldModels on (fieldModels.id = readings.fieldModelId)
        join models on (models.id = fieldModels.modelId)
    where
        models.name = '文'
        and fieldModels.name = '読み'
        and readings.value like ?
;");

my %kanji_for;

while (my ($kanji, $reading) = $sth->fetchrow_array) {
    push @{ $kanji_for{$reading} }, $kanji;
    next if $reading =~ /\p{Han}|・/;

    my %words;
    unless ($ENV{ANKI_PROBLEMS}) {
        $reading_sth->execute("%${kanji}%");
        while (my ($readings) = $reading_sth->fetchrow_array) {
            $readings =~ s/<br.*?>/\n/g;
            my ($reading) = $readings =~ /^(.*$kanji.*【.*】)$/m;
            $words{$reading}++;
        }
    }

    say "$kanji: $reading - " . join('、', keys %words);
}

for my $reading (sort { @{ $kanji_for{$b} } <=> @{ $kanji_for{$a} } } grep { @{ $kanji_for{$_} } > 1 } keys %kanji_for) {
    say "$reading: " . join('、', sort @{ $kanji_for{$reading} });
}

$sth = $db->prepare("
    select kanji.factId, kanji.value, reading.value
        from fields as kanji
            join fieldModels as kanjiFieldModel on (kanji.fieldModelId = kanjiFieldModel.id)
            join fields as reading on (kanji.factId = reading.factId)
            join fieldModels as readingFieldModel on (reading.fieldModelId = readingFieldModel.id)
        where
            kanjiFieldModel.name = '漢字'
            and readingFieldModel.name = '読み'
            and reading.value like ('%' || kanji.value || '%')
;");
$sth->execute;

while (my ($fid, $kanji, $reading) = $sth->fetchrow_array) {
    say "$fid|$kanji included in reading $reading";
}
