#!/usr/bin/env perl
use strict;
use warnings;
use File::Slurp qw/slurp write_file/;
use JSON;
use Time::HiRes qw/sleep gettimeofday tv_interval/;
use Fcntl;
use POSIX ':errno_h';
use String::ProgressBar;
use List::Util 'max';

my $time_file = "$ENV{HOME}/.anki-problems";
my %script_time = %{ from_json(slurp($time_file, err_mode => 'quiet') || '{}' ) };

my @scripts = sort { ($script_time{$a}||0) <=> ($script_time{$b}||0) } qw/
    anki-tidy
    context-sentence
    context-typos
    corpus-divergence
    dictionary-translations
    duplicate-sentences
    kanji-order
    marked-cards
    missing-kanji
    needed-readings
    reading-typos
    smartfm-divergence
    source-typos
    spurious-readings
    tag-typos
/;

$| = 1;

for my $script (@scripts) {
    my $start = [gettimeofday];
    my $expected = ($script_time{$script}||0);

    my $bar = String::ProgressBar->new(
        text           => $script,
        max            => (sprintf '%0.2f', $expected),
        text_length    => (max map { length $_ } @scripts),
        show_percent   => 0,
        allow_overflow => 1,
        bar_overflow   => 0,
    );

    open my $handle, "$script 2>&1 |";
    my $flags = 0;
    fcntl($handle, F_GETFL, $flags);
    $flags |= O_NONBLOCK;
    fcntl($handle, F_SETFL, $flags);

    while (1) {
        if (defined(my $line = <$handle>)) {
            print "\e[1;31mERR\e[m\n", $line;
            while (defined(my $line = <$handle>) || $! == EAGAIN) {
                print $line
                    unless $! == EAGAIN;
            }
            last;
        }
        elsif ($! == EAGAIN) {
            my $elapsed = tv_interval($start);
            $bar->update(sprintf '%0.2f', $elapsed);
            print "\r", $bar->string, " ";
            sleep(0.01);
        }
        elsif ($!) {
            exit;
        }
        else {
            $bar->info("\e[1;32mOK!\e[m");
            print "\r", $bar->string;
            last;
        }
    }

    my $elapsed = tv_interval($start);
    my $diff = $elapsed - $expected;

    my $diff_output = '';
    if (sprintf('%.02f', abs($diff)) ne '0.00') {
        $diff_output = sprintf ' (%s%.02fs)', ($diff >= 0 ? '+' : ''), $diff;
    }

    print "\n";

    $script_time{$script} = $elapsed;
}

write_file $time_file, to_json(\%script_time, { pretty => 1, canonical => 1 });
