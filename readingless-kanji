#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Anki::Database;
use Anki::Corpus;
use List::MoreUtils 'uniq', 'any';
use Getopt::Whatever;

my $db = Anki::Database->new;
my $corpus = Anki::Corpus->new;

my $sth = $db->prepare("
    select kanji.value
        from fields as kanji
            join fieldModels as kanjiFieldModel on (kanji.fieldModelId = kanjiFieldModel.id)
            join fields as reading on (kanji.factId = reading.factId)
            join fieldModels as readingFieldModel on (reading.fieldModelId = readingFieldModel.id)
            join facts on (kanji.factId = facts.id)
        where
            kanjiFieldModel.name = '漢字'
            and readingFieldModel.name = '読み'
            and reading.value = ''
            and facts.tags not like '%duplicate-kanji%'
            order by facts.created
;");
$sth->execute;

my @no_readings;
while (my ($kanji) = $sth->fetchrow_array) {
    push @no_readings, $kanji;
}

my $re = do {
    my $re = '([' . join('', @no_readings) . '])';
    qr/$re/;
};

$sth = $db->prepare("
    select sentence.value
        from fields as sentence
            join cards on (sentence.factId = cards.factId)
            join fieldModels on (sentence.fieldModelId = fieldModels.id)
            join models on (fieldModels.modelId = models.id)
        where
            fieldModels.name = '日本語'
            and models.name = '文'
            and cards.type >= 0
            order by cards.created
;");

$sth->execute;

my %sentences_for;

while (my ($sentence) = $sth->fetchrow_array) {
    while ($sentence =~ m{$re}g) {
        push @{ $sentences_for{$1} }, $sentence;
    }
}

my @full_blacklist = (
    qr/淋しい/, # dupe of 寂しい
);

my $i = 0;
for my $kanji (@no_readings) {
    my @sentences = uniq @{ $sentences_for{$kanji} || next };
    my @blacklist = grep { $_ =~ /$kanji/ } @full_blacklist;
    my %skip;

    for my $source_sentence (@sentences) {
        $skip{$source_sentence}++
            if any { $source_sentence =~ $_ } @blacklist;

        next if $skip{$source_sentence};

        for my $word ($source_sentence =~ /\p{Han}$kanji/g, $source_sentence =~ /$kanji\p{Han}/g) {
            for my $skip_sentence (@sentences) {
                next if $source_sentence eq $skip_sentence;
                if ($skip_sentence =~ $word) {
                    $skip{$skip_sentence}++;
                }
            }
        }
    }

    @sentences = grep { !$skip{$_} } @sentences;
    ++$i;

    next if @sentences <= 1 && !$ARGV{full};

    my ($corpus_count, $regular_count) = kanji_count($kanji);

    say "$i. \e[35m$kanji\e[m ($corpus_count+$regular_count=".($corpus_count+$regular_count)."):";
    for my $sentence (@sentences) {
        $sentence =~ s/(\p{Han}*)($kanji)(\p{Han}*)/\e[m$1\e[35m$2\e[m$3\e[37m/g;
        say "  \e[37m$sentence\e[m";
    }
    say "\n";
}

if (!$ENV{ANKI_PROBLEMS}) {
    print "[$i] ";

    $sth = $db->prepare("
        select count(*)
            from fields
            join fieldModels on (fields.fieldModelId = fieldModels.id)
            join models on (fieldModels.modelId = models.id)
            where
                fieldModels.name = '読み'
                and models.name = '漢字'
    ;");
    $sth->execute;
    my ($kanji_count) = $sth->fetchrow_array;

    my $with_reading = $kanji_count - @no_readings;
    printf "Coverage: %d/%d (%.2f%%)\n", $with_reading, $kanji_count, 100*$with_reading/$kanji_count;
}

sub kanji_count {
    my $kanji = shift;

    my $corpus_count = do {
        my $sth = $corpus->prepare("
            SELECT count(*)
            FROM sentences
            WHERE japanese LIKE ?
            AND suspended = 1
        ;");

        $sth->execute("%$kanji%");
        ($sth->fetchrow_array)[0];
    };

    my $regular_count = do {
        my $sth = $db->prepare("
            select count(*)
                from fields
                    join fieldModels on (fieldModels.id = fields.fieldModelId)
                    join models on (models.id = fieldModels.modelId)
                    join cards on (cards.factId = fields.factId)
                where
                    fieldModels.name = '日本語'
                    and models.name = '文'
                    and fields.value like ?
                    and cards.type < 0
        ");
        $sth->execute("%$kanji%");
        ($sth->fetchrow_array)[0];
    };

    return ($corpus_count, $regular_count);
}
