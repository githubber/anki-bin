#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Encode 'encode_utf8';
use Anki::Database;
use LWP::Simple;
use DateTime;
use Net::Twitter;

my $start = DateTime->now(time_zone => "America/New_York")->set(day => 1, hour => 0, minute => 0, second => 0)->epoch;
my %day;

my $db = Anki::Database->new(file => $ENV{ANKI_DECK});

my %query_for = (
    'Cards' => "
        select date(cards.firstAnswered, 'unixepoch', 'localtime'), count(*)
            from cards
            join facts on (cards.factId = facts.id)
            join models on (facts.modelId = models.id)
        where
            models.name not like '%漢字%'
            and cards.type >= 0
            and cards.firstAnswered >= $start
            group by date(cards.firstAnswered, 'unixepoch', 'localtime')
    ;",
    'Kanji' => "
        select date(cards.created, 'unixepoch', 'localtime'), fields.value
            from cards
            join fields on (cards.factId = fields.factId)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
            join cardModels on (cards.cardModelId = cardModels.id)
            join facts on (cards.factId = facts.id)
            join models on (facts.modelId = models.id)
        where
            models.name like '%漢字%'
            and fieldModels.name = '漢字'
            and cardModels.name = '書け'
            and cards.type >= 0
            and cards.created >= $start
    ;",
    'Tae Kim' => "
        select date(cards.firstAnswered, 'unixepoch', 'localtime'), count(*)
            from cards
            join facts on (cards.factId = facts.id)
            join fields as source on (source.factId = facts.id)
            join fieldModels on (source.fieldModelId = fieldModels.id)
            join models on (facts.modelId = models.id)
        where
            models.name = '文'
            and source.value = 'Tae Kim'
            and fieldModels.name = '起こり'
            and cards.type >= 0
            and cards.firstAnswered >= $start
            group by date(cards.firstAnswered, 'unixepoch', 'localtime')
    ;",
    'Karaoke' => "
        select date(cards.firstAnswered, 'unixepoch', 'localtime'), fields.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields on (fields.factId = facts.id)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
        where
            cards.type >= 0
            and fieldModels.name is '起こり'
            and facts.tags like '%カラオケ%'
            and cards.firstAnswered >= $start
    ;",
    'Game' => "
        select date(cards.created, 'unixepoch', 'localtime'), fields.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields on (fields.factId = facts.id)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
        where
            cards.type >= 0
            and fieldModels.name is '起こり'
            and facts.tags like '%ゲーム%'
            and cards.created >= $start
    ;",
    'Reading' => "
        select date(cards.created, 'unixepoch', 'localtime'), fields.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields on (fields.factId = facts.id)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
        where
            cards.type >= 0
            and fieldModels.name is '起こり'
            and facts.tags like '%読み物%'
            and cards.created >= $start
    ;",
    'Map' => "
        select date(cards.firstAnswered, 'unixepoch', 'localtime'), fields.value
            from cards
            join fields on (cards.factId = fields.factId)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
            join facts on (cards.factId = facts.id)
            join models on (facts.modelId = models.id)
        where
            models.name = '地図'
            and fieldModels.name = '名前'
            and cards.type >= 0
            and cards.firstAnswered >= $start
    ;",
    'Yojijukugo' => "
        select date(cards.firstAnswered, 'unixepoch', 'localtime'), fields.value
            from cards
            join fields on (cards.factId = fields.factId)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
            join facts on (cards.factId = facts.id)
            join models on (facts.modelId = models.id)
        where
            models.name = '四字熟語'
            and fieldModels.name = '四字熟語'
            and cards.type >= 0
            and cards.firstAnswered >= $start
    ;",
    'Reviews' => "
        select day, reps
            from stats
        where
            type = 1 -- daily not total stats
            and reps > 0
            and strftime('%s', day) - $start + 60*60*24 - 1 >= 0 -- weird comparison bug, also need to catch the full day not just midnight
    ;",
);

for my $achievement (keys %query_for) {
    my $sth = $db->prepare($query_for{$achievement});
    $sth->execute;
    while (my ($date, $value) = $sth->fetchrow_array) {
        push @{ $day{$date}{$achievement} }, $value;
    }
}

my $goi = LWP::Simple::get('http://sartak.org/%E8%AA%9E%E5%BD%99.html');
if (defined $goi) {
    for my $day (keys %day) {
        while ($goi =~ /\b(\w+): #\d+ for $day/g) {
            my $value = $1;
            push @{ $day{$day}{Vocabulary} }, $value;
        }
    }
}
else {
    warn "Unable to fetch vocabulary\n";
}

eval {
    my $twitter = Net::Twitter->new(traits => [qw/API::REST InflateObjects/]);
    my @tweets;
    for (my $page = 1; @tweets == 0 || $tweets[-1]->created_at->epoch >= $start; ++$page) {
        push @tweets, @{ $twitter->user_timeline({id => 'sartak', page => $page }) };
    }

    for my $tweet (@tweets) {
        last if $tweet->created_at->epoch < $start;

        my $text = $tweet->text;
        $text =~ s/\bRT @.*//;

        # at least 33% kanji/kana
        (my $j_chars = $text) =~ s/[^\p{Han}\p{Hiragana}\p{Katakana}]+//g;
        next if length($j_chars) < length($text) / 3;

        my $day = $tweet->created_at->ymd;
        push @{ $day{$day}{Write} }, $text;
    }
};
if ($@) {
    warn "Twitter error: $@\n";
}

for my $day (sort keys %day) {
    my $cards = $day{$day};
    say $day;
    for my $achievement (sort keys %$cards) {
        my @values = @{ $cards->{$achievement} };
        print "    $achievement: ";

        my %seen;
        $seen{$_}++ for @values;

        if ($achievement eq 'Kanji') {
            say join('', @values) . " (" . @values . ")";
        }
        elsif ($achievement eq 'Vocabulary') {
            say join(', ', @values) . " (" . @values . ")";
        }
        elsif (keys(%seen) > 1) {
            say "";

            my %seen2;
            for (grep { !$seen2{$_}++ } @values) {
                print "        $_";
                print " ($seen{$_})" unless $achievement eq 'Write';
                say "";
            }
        }
        else {
            my $value = $values[0];
            print $value;
            print " ($seen{$value})" if $seen{$value} > 1;
            say "";
        }
    }
    say "";
}
