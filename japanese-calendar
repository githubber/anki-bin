#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Encode 'encode_utf8';
use Anki::Database;
use LWP::Simple;
use DateTime;
use DateTime::Format::Strptime;
use Net::Twitter;

my @disabled = qw/
    ウィキペディア
    漢字
/;

my @sort = (
    '記事',
    '書く',
    'アンキの勉強',
    'カードを加える',
    '単語',
    'ゲーム',
    '読む',
    '映画を観る',
    '歌詞',
    '漢検',
    '資料を集める',

    '文法',
    '動画',
);

my $drift = -5; # hours

my $start_dt = DateTime->now(time_zone => "America/New_York")->set(hour => 0, minute => 0, second => 0);
if ($start_dt->day < 7) {
    $start_dt->add(months => -1);
    $start_dt->set(day => 23);
}
else {
    $start_dt->set(day => 1);
}

my $start = $start_dt->epoch;
my %day;

my $db = Anki::Database->new;

my %query_for = (
    'カードを加える' => "
        select cards.firstAnswered, source.value
            from cards
            join facts on (cards.factId = facts.id)
            join models on (facts.modelId = models.id)
            join fields as source on (source.factId = facts.id)
            join fieldModels on (source.fieldModelId = fieldModels.id)
        where
            models.name <> '漢字'
            and fieldModels.name = '出所'
            and cards.type >= 0
            and cards.firstAnswered >= $start
    ;",
    '漢字' => "
        select cards.created, fields.value
            from cards
            join fields on (cards.factId = fields.factId)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
            join cardModels on (cards.cardModelId = cardModels.id)
            join facts on (cards.factId = facts.id)
            join models on (facts.modelId = models.id)
        where
            models.name = '漢字'
            and fieldModels.name = '漢字'
            and cardModels.name = '書け'
            and cards.type >= 0
            and cards.created >= $start
        order by cards.created ASC
    ;",
    '文法' => "
        select cards.firstAnswered, fields.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields on (fields.factId = facts.id)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
        where
            cards.type >= 0
            and fieldModels.name is '出所'
            and facts.tags like '%文法%'
            and cards.firstAnswered >= $start
    ;",
    '動画' => "
        select cards.firstAnswered, fields.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields on (fields.factId = facts.id)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
        where
            cards.type >= 0
            and fieldModels.name is '出所'
            and facts.tags like '%動画%'
            and cards.firstAnswered >= $start
    ;",
    '歌詞' => "
        select cards.firstAnswered, fields.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields on (fields.factId = facts.id)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
        where
            cards.type >= 0
            and fieldModels.name is '出所'
            and facts.tags like '%カラオケ%'
            and cards.firstAnswered >= $start
    ;",
    '記事' => "
        select cards.firstAnswered, fields.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields on (fields.factId = facts.id)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
        where
            cards.type >= 0
            and fieldModels.name is '出所'
            and facts.tags like '%記事%'
            and cards.firstAnswered >= $start
    ;",
    'ゲーム' => "
        select cards.created, fields.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields on (fields.factId = facts.id)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
        where
            cards.type >= 0
            and fieldModels.name is '出所'
            and facts.tags like '%ゲーム%'
            and cards.created >= $start
    ;",
    'ウィキペディア' => "
        select cards.created, source.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields as source on (source.factId = facts.id)
            join fieldModels on (source.fieldModelId = fieldModels.id)
            join models on (facts.modelId = models.id)
        where
            models.name = '文'
            and source.value like 'http://ja.wikipedia.org/%'
            and fieldModels.name = '出所'
            and cards.type >= 0
            and cards.created >= $start
    ;",
    '読む' => "
        select cards.created, fields.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields on (fields.factId = facts.id)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
        where
            cards.type >= 0
            and fieldModels.name is '出所'
            and facts.tags like '%読み物%'
            and cards.created >= $start
    ;",
    '映画を観る' => "
        select cards.created, fields.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields on (fields.factId = facts.id)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
        where
            cards.type >= 0
            and fieldModels.name is '出所'
            and facts.tags like '%映画%'
            and cards.created >= $start
    ;",
    '地図' => "
        select cards.firstAnswered, fields.value
            from cards
            join fields on (cards.factId = fields.factId)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
            join facts on (cards.factId = facts.id)
            join models on (facts.modelId = models.id)
        where
            models.name = '地図'
            and fieldModels.name = '名前'
            and cards.type >= 0
            and cards.firstAnswered >= $start
    ;",
    '四字熟語' => "
        select cards.firstAnswered, fields.value
            from cards
            join fields on (cards.factId = fields.factId)
            join fieldModels on (fields.fieldModelId = fieldModels.id)
            join facts on (cards.factId = facts.id)
            join models on (facts.modelId = models.id)
        where
            models.name = '四字熟語'
            and fieldModels.name = '四字熟語'
            and cards.type >= 0
            and cards.firstAnswered >= $start
    ;",
    '新聞' => "
        select cards.firstAnswered, source.value
            from cards
            join facts on (cards.factId = facts.id)
            join fields as source on (source.factId = facts.id)
            join fieldModels on (source.fieldModelId = fieldModels.id)
            join models on (facts.modelId = models.id)
        where
            models.name = '文'
            and source.value like 'http://mainichi.jp%'
            and fieldModels.name = '出所'
            and cards.type >= 0
            and cards.firstAnswered >= $start
    ;",
);

for my $achievement (keys %query_for) {
    my $sth = $db->prepare($query_for{$achievement});
    $sth->execute;
    while (my ($epoch, $value) = $sth->fetchrow_array) {
        my $dt = DateTime->from_epoch(epoch => $epoch)->set_time_zone('America/New_York');
        $dt->add(hours => $drift);
        my $date = $dt->ymd;
        push @{ $day{$date}{$achievement} }, $value;
    }
}

# Reviews
my $sth = $db->prepare("
    select day, reps
        from stats
    where
        type = 1 -- daily not total stats
        and reps > 0
        and strftime('%s', day) - $start + 60*60*24 - 1 >= 0 -- weird comparison bug, also need to catch the full day not just midnight
;");
$sth->execute;
while (my ($date, $value) = $sth->fetchrow_array) {
    push @{ $day{$date}{'アンキの勉強'} }, $value;
}

my $goodreads = $ENV{GOODREADS_FEED} ? LWP::Simple::get($ENV{GOODREADS_FEED}) : undef;
if (defined $goodreads) {
    while ($goodreads =~ m{<pubDate>([^<]+)</pubDate>.*?<!\[CDATA\[(.*?)\s*\]\]>}gs) {
        my ($date, $description) = ($1, $2);
        if ($description =~ m{^.*? is on page (\d+) of (\d+) of (.+)$}m) {
            my ($page, $pages, $title) = ($1, $2, $3);

            # Sun, 21 Aug 2011 10:12:06 -0700
            my $parser = DateTime::Format::Strptime->new(pattern => '%a, %d %b %Y %T %z');
            my $dt = $parser->parse_datetime($date);
            $dt->add(hours => $drift);
            my $day = $dt->ymd;

            unshift @{ $day{$day}{'読む'} }, "[GR] $title";
        }
    }
}
else {
    warn "Unable to fetch goodreads feed\n";
}

my $goi = `perl -I$ENV{HOME}/devel/vocabulary/lib $ENV{HOME}/devel/vocabulary/japanese.pl 2>/dev/null`;
if (defined $goi) {
    for my $day (keys %day) {
        while ($goi =~ /\b(\w+): #\d+ for $day/g) {
            my $value = $1;
            push @{ $day{$day}{'単語'} }, $value;
        }
    }
}
else {
    warn "Unable to fetch vocabulary\n";
}

eval {
    my $twitter = Net::Twitter->new(traits => [qw/API::REST InflateObjects/]);
    my @tweets;
    for (my $page = 1; @tweets == 0 || $tweets[-1]->created_at->epoch >= $start; ++$page) {
        push @tweets, @{ $twitter->user_timeline({id => 'sartak', page => $page }) };
    }

    for my $tweet (@tweets) {
        last if $tweet->created_at->epoch < $start;

        my $text = $tweet->text;
        $text =~ s/\bRT @.*//;

        # *any* kana/kanji is good, but I may discard the tweet later
        (my $j_chars = $text) =~ s/[^\p{Han}\p{Hiragana}\p{Katakana}]+//g;
        next if !length($j_chars);

        my $day = $tweet->created_at->set_time_zone('America/New_York')->add(hours => $drift)->ymd;
        unshift @{ $day{$day}{'書く'} }, $text;
    }
};
if ($@) {
    warn "Twitter error: $@\n";
}

for my $day (sort keys %day) {
    my %cards = %{ $day{$day} };
    say $day;

    delete @cards{@disabled};

    for my $achievement (@sort) {
        show_achievement($achievement, delete $cards{$achievement});
    }

    die 'Unsorted achievement: ' . join ', ', keys %cards if keys %cards;

    say "";
}

sub show_achievement {
    my $achievement = shift;
    my @values = @{ shift || return };

    print "    $achievement";

    my %seen;
    $seen{$_}++ for @values;

    if ($achievement eq '漢字') {
        say " (" . @values . "): " . join('', @values);
    }
    elsif ($achievement eq '単語') {
        say " (" . @values . "): " . join(', ', @values);
    }
    elsif (keys(%seen) > 1) {
        my $sum = @values;
        say " ($sum): ";

        my %seen2;
        for (sort { $seen{$b} <=> $seen{$a} } grep { !$seen2{$_}++ } @values) {
            print "        $_";
            print " ($seen{$_})" unless $achievement eq '書く';
            say "";
        }
    }
    else {
        my $value = $values[0];
        print " ($seen{$value})" if $seen{$value} > 1;
        say ": $value";
    }
}
