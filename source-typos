#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Anki::Database;
use List::Util 'first';

my %known_sources;
my @regex_sources;
my %type_of;

my %sources = (
    games => [
        'jNetHack',
        'クロノ・トリガー',
        'ブレス オブ ファイア 竜の戦士',
        'マックスウェルの不思議なノート',
        'ポケットモンスター ファイアレッド',
        'ファンタシースター 千年紀の終りに',
        'ファンタシースターII 還らざる時の終わりに',
        'Halo Reach',
        qr/^ファイナルファンタジー[IVX]+$/,
        'ファイナルファンタジータクティクス 獅子戦争',
    ],
    novels => [
        qr/^デューン砂の惑星 \([1-4]\)$/,
        'ハリー・ポッターと賢者の石',
        'ハリー・ポッターと秘密の部屋',
        'ホビットの冒険',
        '指輪物語',
        '坑夫',
    ],
    manga => [
        qr/^ドラゴンボール\d+$/,
        qr/^北斗の拳\d+$/,
        qr/^天才バカボン\d+$/,
        qr/^ヒカルの碁\d+$/,
    ],
    movies => [
        'The Matrix',
        'The Matrix: Reloaded',
        'The Matrix: Revolutions',
        'ブレイド',
        'ブレイド2',
        'アキラ',
        'Die Hard 2',
        'Return of the King',
        "Ocean's 11",
        'Constantine',
        'Babel',
        'ハリー・ポッターと賢者の石(映画)',
    ],
    television => [
        qr/^ドラゴンボール改\d+$/,
        qr/^北斗の拳\d+話目$/,
        'あやかの突撃英会話',
        'ドラゴンボール改',
        'ロス・タイム・ライフ',
    ],
    tools => [
        'Dictionary.app',
        'Tae Kim',
        'Smart.fm',
        'MFSP',
        'Making Out in Japanese',
        'Dirty Guide to Japanese',
        'Genki',
        'A Dictionary of Japanese Particles',
        'ドラえもん四字熟語100',
        '大辞泉',
        '大辞林',
        'ドラえもんのまんがで英語辞典覚える',
    ],
    references => [
        'モダンPerl入門',
        'CPANモジュールガイド',
    ],
    songs => [
        'Mr. Children - 潜水',
        "L'Arc~en~Ciel - Dune",
        'Gackt - Mirror',
        '高田雅史 - 俺の右手はゴッドハンド',
        '分島花音 - アンニュイ気分！',
        'Malice Mizer - Syunikiss',
        'Perfume - 引力',
        "L'Arc~en~Ciel - 接吻",
    ],
    apps => [
        'RT',
        'Jifty',
        'Facebook',
        'OS X',
        'Gmail',
        'Echofon',
        'YouTube',
        'Twitter',
        'Foursquare',
        'Google Reader',
        'Firefox',
        'Skype',
        'NetNewsWire',
        'Last.fm',
        'iOS',
        'Japanese.app',
        'Amazon',
    ],
    podcasts => [
        '読売ニュースポッドキャスト',
        'モヤモヤとーく',
    ],
    conversations => [
        qr/^Personal correspondence with .+/,
        qr/^@\w+$/,
    ],
    real_life => [
        '中村先生',
        '高橋先生',
        '公共交通機関',
        qr/^Conversation at .+/,
    ],
);

my %expected_tags = (
    games      => 'ゲーム',
    songs      => 'カラオケ',
    novels     => '読み物',
    manga      => '読み物',
    references => '読み物',
);

for my $type (keys %sources) {
    for my $source (@{ $sources{$type} }) {
        $type_of{$source} = $type;

        if (ref($source) eq 'Regexp') {
            push @regex_sources, $source;
        }
        else {
            $known_sources{$source} = $source;
        }
    }
}

my $db = Anki::Database->new(file => $ENV{ANKI_DECK});
my $sth = $db->prepare("
    select fields.value, fields.factId, facts.tags
    from fields
        join fieldModels on (fields.fieldModelId = fieldModels.id)
        join models on (fieldModels.modelId = models.id)
        join facts on (fields.factId = facts.id)
    where
        models.name is '文'
        and fieldModels.name like '%起こり%'
        and fields.value not like 'http%'
        and fields.value not like '# %'
;");

$sth->execute;

my %count;

while (my ($source, $factid, $tags) = $sth->fetchrow_array) {
    my $source_template = $known_sources{$source} || first { $source =~ $_ } @regex_sources;
    if ($source_template) {
        my $type = $type_of{$source_template};
        die "$source_template has no type ??\n" if !$type;

        if ($expected_tags{$type} && $tags !~ $expected_tags{$type}) {
            warn "$factid|$source - didn't include tag $expected_tags{$type} expected of $type\n";
        }
        next;
    }

    $count{$source}++;
}

for my $source (sort { $count{$b} <=> $count{$a} } keys %count) {
    say "$count{$source}\t$source";
}

$sth = $db->prepare("
    select fields.value, fields.factId
    from fields
        join fieldModels on (fields.fieldModelId = fieldModels.id)
        join models on (fieldModels.modelId = models.id)
    where
        models.name is '文'
        and fieldModels.name like '%起こり%'
;");

$sth->execute;

while (my ($source, $factid) = $sth->fetchrow_array) {
    say "$factid|$source" if $source =~ /\n|<br/;
    say $source if $source =~ m{(twitter|facebook)\.com/\#\!};
}

