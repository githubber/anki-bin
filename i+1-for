#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Anki::Morphology;

my $sentence = join ' ', @ARGV
    or die "usage: $0 word\n";
my $morph = Anki::Morphology->new;
my $corpus = $morph->corpus;

my @word_morphemes = map { $_->{dictionary} } $morph->morphemes_of($sentence);
warn "$sentence does not produce exactly one morpheme: " . join(', ', @word_morphemes)
    if @word_morphemes != 1;

my %i = map { $_ => 1 } $morph->known_morphemes;

my $extra = (join ' AND ', map { "japanese like '%$_%'" } (join '', @word_morphemes) =~ /\p{Han}/g) || '1=1';
my $order = $corpus->order;
my $sth = $corpus->prepare("
    SELECT rowid, japanese FROM sentences
    WHERE suspended = 1
    AND $extra
    ORDER BY $order
;");
$sth->execute;

SENTENCE: while (my ($rowid, $sentence) = $sth->fetchrow_array) {
    my @morphemes = map { $_->{dictionary} } $morph->morphemes_of($sentence);

    my $actually_match = 0;

    MORPHEME: for (my $m = 0; $m < @morphemes; ++$m) {
        my $t_match = 1;

        TRY: for (my $w = 0; $w < @word_morphemes; ++$w) {
            if (($morphemes[$m+$w]||'') ne $word_morphemes[$w]) {
                $t_match = 0;
                last TRY;
            }
        }

        $actually_match = 1 if $t_match;

        if (!$t_match && !$i{ $morphemes[$m] }) {
            next SENTENCE;
        }
    }

    say "$rowid: $sentence"
        if $actually_match;
}

