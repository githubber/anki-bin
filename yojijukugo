#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Anki::Database;
use List::MoreUtils 'all';

my $ankidir = "$ENV{HOME}/Documents/Anki";
my $yoji_deck = "$ankidir/yojijukugo.anki";

my $japanese_db = Anki::Database->new(file => $ENV{ANKI_DECK});
my $yoji_db = Anki::Database->new(file => $yoji_deck);

my %seen_kanji = map { $_ => 1 } my_kanji();
my %seen_yoji  = map { $_ => 1 } my_yoji();

my @learnable = grep { !$seen_yoji{$_->[0]} } learnable_yoji(\%seen_kanji);

my $prev_freq = '';
for (@learnable) {
    my ($yoji, $reading, $meaning, $freq) = @$_;
    say "\n" . ($prev_freq = $freq) . ":" if $freq ne $prev_freq;
    say "    $yoji【$reading】$meaning";
}

sub my_kanji {
    my $sth = $japanese_db->prepare("
        select kanji.value
            from fields as kanji
                join fieldModels as kanjiFieldModel on (kanji.fieldModelId = kanjiFieldModel.id)
                join fields as reading on (kanji.factId = reading.factId)
                join fieldModels as readingFieldModel on (reading.fieldModelId = readingFieldModel.id)
                join facts on (kanji.factId = facts.id)
            where
                kanjiFieldModel.name = '漢字'
                and readingFieldModel.name = '読み'
                and reading.value <> ''
                order by facts.created
    ;");

    $sth->execute;

    my @kanji;
    while (my ($kanji) = $sth->fetchrow_array) {
        push @kanji, $kanji;
    }
    return @kanji;
}

sub my_yoji {
    my $sth = $japanese_db->prepare("
        select yoji.value
            from fields as yoji
            join fieldModels on (yoji.fieldModelId = fieldModels.id)
            join cards as yoji_card on (yoji.factId = yoji_card.factId)
        where
            fieldModels.name = '四字熟語'
            and yoji_card.type >= 0
    ;");

    $sth->execute;

    my @yoji;
    while (my ($yoji) = $sth->fetchrow_array) {
        push @yoji, $yoji;
    }
    return @yoji;
}

sub learnable_yoji {
    my $kanji = shift;

    my $sth = $yoji_db->prepare("
        select yoji.value, reading.value, meaning.value, frequency.value
        from fields as yoji
            join fields as frequency on (yoji.factId = frequency.factId)
            join fields as reading on (yoji.factId = reading.factid)
            join fields as meaning on (yoji.factId = meaning.factid)
            join fieldModels as yojiModel on (yoji.fieldModelId = yojiModel.id)
            join fieldModels as frequencyModel on (frequency.fieldModelId = frequencyModel.id)
            join fieldModels as readingModel on (reading.fieldModelId = readingModel.id)
            join fieldModels as meaningModel on (meaning.fieldModelId = meaningModel.id)
        where
            yojiModel.name = '四字熟語'
            and frequencyModel.name = 'Frequency'
            and readingModel.name = '読み'
            and meaningModel.name = 'Meaning'
        order by frequency.value
    ;");

    $sth->execute;

    my @yoji;
    while (my ($yoji, $reading, $meaning, $frequency) = $sth->fetchrow_array) {
        push @yoji, [$yoji, $reading, $meaning, $frequency]
            if all { $kanji->{$_} } split '', $yoji;
    }
    return @yoji;
}
