#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Text::MeCab;
use Anki::Database;
use Anki::Corpus;
use Getopt::Whatever;
use Encode 'decode_utf8';

my $anki = Anki::Database->new;
my $corpus = Anki::Corpus->new;
my $mecab = Text::MeCab->new;

my %i;

my ($i, $e) = (0, 0);

# prime %i with known sentences from Anki
do {
    my $sth = $anki->prepare("
        SELECT value FROM fields
            JOIN fieldModels ON (fieldModels.id = fields.fieldModelId)
            JOIN cards ON (cards.factId = fields.factId)
        WHERE
            fieldModels.name = '日本語'
            AND cards.type > 0
    ;");
    $sth->execute;

    while (my ($sentence) = $sth->fetchrow_array) {
        say 2**$e++ if ++$i == 2**$e;

        for (my $node = $mecab->parse($sentence); $node; $node = $node->next) {
            my @fields = split ',', decode_utf8 $node->feature;
            my $dict = $fields[6];

            $i{$dict}++;
        }
    }

    say "Got " . scalar(keys %i) . " words";
};

($i, $e) = (0, 0);

my %anti_i;


do {
    open my $known_sentences, '>', 'known.txt';

    my $order = $corpus->order;

    my @extra;
    push @extra, "AND source NOT IN ('吾輩は猫である', 'こゝろ', '坊っちゃん')" if $ARGV{'skip-classics'};
    push @extra, "AND source NOT IN ('Twitter')" if $ARGV{'skip-twitter'};
    push @extra, "AND source NOT IN ('MFSP', 'Smart.fm', 'ARES-3', 'プログレッシブ英和・和英中辞典', '四字熟語', '四字熟語 Example', 'Twitter')" if $ARGV{'skip-nonbooks'};
    push @extra, "AND source NOT LIKE 'ハリー・ポッターと%' AND source NOT IN ('吾輩は猫である', 'こゝろ', '坊っちゃん')" if $ARGV{'skip-books'};
    my $extra = join "\n", @extra;

    my $sth = $corpus->prepare("
        SELECT japanese, source FROM sentences
        WHERE suspended = 1
        $extra
        ORDER BY $order
    ;");
    $sth->execute;

    my $prev_source = '';
    while (my ($sentence, $source) = $sth->fetchrow_array) {
        say 2**$e++ if ++$i == 2**$e;

        my (@known, @unknown);
        for (my $node = $mecab->parse($sentence); $node; $node = $node->next) {
            my @fields = split ',', decode_utf8 $node->feature;
            my $dict = $fields[6];

            if ($i{$dict}) {
                push @known, $dict;
            }
            else {
                push @unknown, $dict;
                $anti_i{$dict}++;
            }
        }

        if ($source ne $prev_source) {
            print $known_sentences "\n" if $prev_source ne '';
            print $known_sentences "$source\n";
            $prev_source = $source;
        }

        print $known_sentences "  $sentence\n" if @unknown == 0;
    }
};

$i = 0;

open my $freq, '>', 'freq.txt';
for my $word (sort { $anti_i{$b} <=> $anti_i{$a} } keys %anti_i) {
    print $freq "$word: $anti_i{$word}\n";
    say "$i. $word: $anti_i{$word}" if ++$i < 10;
}


