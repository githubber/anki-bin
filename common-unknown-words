#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Anki::Morphology;
use Getopt::Whatever;

my $morph  = Anki::Morphology->new;
my $anki   = $morph->anki;
my $corpus = $morph->corpus;

my %i = map { $_ => 1 } $morph->known_morphemes;
say "You know " . keys(%i) . " words!";

if ($ARGV{add}) {
    $i{$_}++ for ref($ARGV{add}) ? @{ $ARGV{add} } : $ARGV{add};
}

my %anti_i;
my %source_count;
my @i_plus;

my $order = $corpus->order;

my @extra;
push @extra, "AND source NOT IN ('吾輩は猫である', 'こゝろ', '坊っちゃん')" if $ARGV{'skip-classics'};
push @extra, "AND source NOT IN ('Twitter')" if $ARGV{'skip-twitter'};
push @extra, "AND source NOT IN ('MFSP', 'Smart.fm', 'ARES-3', 'プログレッシブ英和・和英中辞典', '四字熟語', '四字熟語 Example', 'Twitter')" if $ARGV{'skip-nonbooks'};
push @extra, "AND source NOT LIKE 'ハリー・ポッターと%' AND source NOT IN ('吾輩は猫である', 'こゝろ', '坊っちゃん')" if $ARGV{'skip-books'};
my $extra = join "\n", @extra;
my $sth = $corpus->prepare("
    SELECT japanese, source FROM sentences
    WHERE suspended = 1
    $extra
    ORDER BY $order
;");
$sth->execute;

open my $known_sentences, '>', 'known.txt';

my $ankied = 0;
my $prev_source = '';
my ($i, $e) = (0, 0);
while (1) {
    my ($sentence, $source, $fid) = $sth->fetchrow_array;
    if (!$sentence) {
        last if $ankied || $ARGV{'skip-anki'};

        $sth = $anki->prepare("
            SELECT value, 'Anki', fields.factId FROM fields
                JOIN fieldModels ON (fieldModels.id = fields.fieldModelId)
                JOIN cards ON (cards.factId = fields.factId)
            WHERE
                fieldModels.name = '日本語'
                AND cards.type <= 0
        ;");
        $sth->execute;
        ($sentence, $source, $fid) = $sth->fetchrow_array;
        $ankied = 1;
    }

    say 2**$e++ if ++$i == 2**$e;

    my (@known, @unknown);
    for my $morpheme ($morph->morphemes_of($sentence)) {
        my $dict = $morpheme->{dictionary};

        if ($i{$dict}) {
            push @known, $dict;
        }
        else {
            push @unknown, $dict;
            $anti_i{$dict}++ if !$ARGV{'verbose'};
        }
        $anti_i{$dict}++ if $ARGV{'verbose'};
    }

    if ($source ne $prev_source) {
        print $known_sentences "\n" if $prev_source ne '';
        print $known_sentences "$source\n";
        $prev_source = $source;
    }

    push @{ $i_plus[ @unknown ] }, $sentence;

    if (@unknown == 0) {
        print $known_sentences "  ";
        print $known_sentences "$fid|" if $fid;
        print $known_sentences "$sentence\n";
        $source_count{$source}{known}++;
    }
    else {
        $source_count{$source}{unknown}++;
    }
}

open my $freq, '>', 'freq.txt';
for my $word (sort { $anti_i{$b} <=> $anti_i{$a} } keys %anti_i) {
    print $freq "# " if $ARGV{'verbose'} && $i{$word};
    print $freq "$word: $anti_i{$word}\n";
}

open my $ip, '>', 'i-plus.txt';
for (my $i = 0; $i < @i_plus; ++$i) {
    next if !$i_plus[$i];
    print $ip "i+$i (".@{$i_plus[$i]}."):\n";
    print $ip "  $_\n" for @{ $i_plus[$i] };
    print $ip "\n";
}

for my $source (sort keys %source_count) {
    my $known = $source_count{$source}{known};
    my $unknown = $source_count{$source}{unknown};
    my $ratio = 100 * $known / ($known+$unknown);
    say sprintf '%3d%% (K:%d U:%d) %s', $ratio, $known, $unknown, $source;
}
