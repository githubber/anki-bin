#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Anki::Database;
use Lingua::JA::Moji 'kana2katakana', 'kata2hira';
use List::MoreUtils 'uniq';
sub kana2hiragana { kata2hira(kana2katakana(shift)) }

my %known_homographs = (
    '1日'    => [qw/いちにち   ついたち/],
    '4'      => [qw/し         よん/],
    '7'      => [qw/なな       しち/],
    '目'     => [qw/め         もく/],
    '娘'     => [qw/こ         むすめ/],
    '名'     => [qw/めい       な/],
    '後'     => [qw/あと       ご/],
    '我'     => [qw/われ       わ/],
    '下'     => [qw/した       もと/],
    '主'     => [qw/ぬし       おも/],
    '人'     => [qw/ひと       じん/],
    '何'     => [qw/なに       なん/],
    '側'     => [qw/かわ       そば/],
    '君'     => [qw/きみ       くん/],
    '大'     => [qw/だい       おお/],
    '孫'     => [qw/そん       まご/],
    '家'     => [qw/いえ       うち/],
    '山'     => [qw/やま       さん/],
    '方'     => [qw/かた       ほう/],
    '星'     => [qw/ほし       せい/],
    '様'     => [qw/さま       よう/],
    '殿'     => [qw/との       どの/],
    '版'     => [qw/はん       ばん/],
    '玉'     => [qw/たま       だま/],
    '的'     => [qw/てき       まと/],
    '空'     => [qw/から       そら/],
    '訳'     => [qw/やく       わけ/],
    '金'     => [qw/かね       きん/],
    '頃'     => [qw/ころ       ごろ/],
    '中'     => [qw/なか       じゅう/],
    '僕'     => [qw/ぼく       しもべ/],
    '城'     => [qw/しろ       じょう/],
    '敵'     => [qw/てき       かたき/],
    '月'     => [qw/つき       ムーン/],
    '皆'     => [qw/みな       みんな/],
    '穴'     => [qw/あな       ホール/],
    '間'     => [qw/かん       あいだ/],
    '声'     => [qw/こえ       ヴォイス/],
    '剣'     => [qw/つるぎ     けん/],
    '超'     => [qw/ちょう     スーパー/],
    '吐く'   => [qw/つく       はく/],
    '空く'   => [qw/あく       すく/],
    '良い'   => [qw/いい       よい/],
    '行く'   => [qw/いく       ゆく/],
    '入る'   => [qw/いる       はいる/],
    '弾く'   => [qw/ひく       はじく/],
    '開く'   => [qw/あく       ひらく/],
    '明日'   => [qw/あした     あす/],
    'お腹'   => [qw/おなか     おはら/],
    '何か'   => [qw/なにか     なんか/],
    '臭い'   => [qw/におい     くさい/],
    '辛い'   => [qw/からい     つらい/],
    '通り'   => [qw/とおり     どおり/],
    '日本'   => [qw/にっぽん   にほん/],
    '一日'   => [qw/いちにち   ついたち/],
    '餃子'   => [qw/ぎょうざ   チャオズ/],
    '十分'   => [qw/じゅっぷん じゅっぶん/],
    '連中'   => [qw/れんちゅう れんじゅう/],
    '止める' => [qw/とめる     やめる/],
);
my %readings_of_word;
my %readings_of_kanji;
my %fids_for_word;

my $db = Anki::Database->new;
my $sth = $db->prepare("
    select reading.factId, reading.value, sentence.value, cards.type
    from fields as reading
        join fieldModels as readingFM on (reading.fieldModelId = readingFM.id)
        join models on (readingFM.modelId = models.id)
        join fields as sentence on (reading.factId = sentence.factId)
        join fieldModels as sentenceFM on (sentence.fieldModelId = sentenceFM.id)
        join cards on (reading.factId = cards.factId)
    where
        models.name is '文'
        and readingFM.name like '%読み%'
        and sentenceFM.name like '%日本語%'
        and reading.value <> '';
");

$sth->execute;

while (my ($fid, $reading_field, $sentence, $card_type) = $sth->fetchrow_array) {
    if ($card_type > 0) {
        my @sentence_kanji = uniq($sentence =~ /\p{Han}/g);
        my @reading_kanji = uniq($reading_field =~ /\p{Han}/g);
        warn "$fid kanji order: got [@reading_kanji] expected [@sentence_kanji]\n" if "@sentence_kanji" ne "@reading_kanji";
    }

    my @readings = split /<br.*?>/, $reading_field;
    my %seen_this_field;
    for (@readings) {
        if (my ($word, $reading) = /^([^【]+)【([^】]+)】$/) {
            if ($seen_this_field{$_}++) {
                warn "$fid duplicate reading: $_\n";
            }

            $readings_of_word{$word}{$reading}++;
            push @{ $fids_for_word{$word}{$reading} }, $fid;

            for my $kanji ($word =~ /\p{Han}/g) {
                $readings_of_kanji{$kanji}{$reading}++;
            }
            next;
        }

        warn "$fid malformed reading: $_\n";
    }
}

for my $word (sort keys %readings_of_word) {
    if ($known_homographs{$word}) {
        $readings_of_word{$word}{$_} = 0 for @{ $known_homographs{$word} };
    }

    # only show words with more than one reading
    # or with kanji in the reading itself (probably over-eagerly converted)
    # or with only kana in the word (probably forgot to convert)
    next if (grep { $_ } values %{ $readings_of_word{$word} }) <= 1
         && (join '', keys %{ $readings_of_word{$word} }) !~ /\p{Han}/
         && $word !~ /^(\p{Hiragana}|\p{Katakana})+$/;

    say "$word: " . join ', ',
        map { "$_ ($readings_of_word{$word}{$_}x)" }
        sort { $readings_of_word{$word}{$b} <=> $readings_of_word{$word}{$a} }
        keys %{ $readings_of_word{$word} };

    my $said_fids = 0;
    for my $reading (keys %{ $readings_of_word{$word} }) {
        my @fids = @{ $fids_for_word{$word}{$reading} };
        if (@fids < 4) {
            say "    $reading: " . join(', ', @fids);
            $said_fids++;
        }
    }

    print "\n" if $said_fids;
}

if (0) {
$sth = $db->prepare("
    select kanji.value, yomi.value
    from fields as kanji
        join fields as yomi on (kanji.factId = yomi.factId)
        join fields as meaning on (kanji.factId = meaning.factId)
        join fieldModels as kanjiFieldModel on (kanji.fieldModelId = kanjiFieldModel.id)
        join fieldModels as yomiFieldModel on (yomi.fieldModelId = yomiFieldModel.id)
        join fieldModels as meaningFieldModel on (meaning.fieldModelId = meaningFieldModel.id)
        join models on (kanjiFieldModel.modelId = models.id)
    where
        models.name like '%漢字%'
        and kanjiFieldModel.name = '漢字'
        and yomiFieldModel.name = '読み'
        and meaningFieldModel.name = '英語'
        and yomi.value <> ''
        and meaning.value <> yomi.value
;");

$sth->execute;
KANJI: while (my ($kanji, $yomi) = $sth->fetchrow_array) {
    my @readings = keys %{ $readings_of_kanji{$kanji} || {} };
    my $hirayomi = kana2hiragana($yomi);
    for my $reading (@readings) {
        my $hirareading = kana2hiragana($reading);
        next KANJI if $hirareading =~ qr/\Q$hirayomi\E/;
    }
    say "$kanji: $yomi (@readings)";
}
}

__END__
中: なか, なか？
今日: きょう, きよう
会社: かいしゃ, 会社
信じる: しんじる, 信じる
回復: かいふき, かいふく
変わる: かわる, くわる
存在: そんざい, ぞんさい
引数: ひきすう, ひくすう
恐怖: きょうふ, きょふ
月: つき, つき？
歌う: うたう, 歌う
水死: すいし, すいしたい
簡単: かんたん, たんたん
読み込む: よみこむ, 読み込む
遊ぶ: あそび, あそぶ
